buildscript {
    repositories {
        mavenRepo(url: 'http://jcenter.bintray.com')
    }
    dependencies {
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '2.0.16')
        classpath(group: 'eu.appsatori', name: 'gradle-fatjar-plugin', version: '0.2-rc1')
    }
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'artifactory'
    final env = System.getenv()

    def artifactoryUrl = hasProperty('artifactoryUrl')?artifactoryUrl:env['ARTIFACTORY_URL']
    if (artifactoryUrl) {
        artifactory {
            contextUrl = artifactoryUrl
            //The base Artifactory URL if not overridden by the publisher/resolver
            resolve {
                repository {
                    repoKey = 'libs-release'
                    maven = true
                }
            }
            publish {
                repository {
                    repoKey = 'oss-snapshot-local'   //The Artifactory repository key to publish to
                    username = hasProperty('artifactoryUsername')?artifactoryUsername:env['ARTIFACTORY_USERNAME'] //The publisher user name
                    password = hasProperty('artifactoryPassword')?artifactoryPassword:env['ARTIFACTORY_PASSWORD'] //The publisher password
                }
            }
        }
    } else {
        repositories {
            //mavenRepo(url: 'http://jcenter.bintray.com')
            mavenCentral()
        }
    }
    
    group = 'org.jfrog.artifactory.client'
    version = currentVersion
    status = version.endsWith('-SNAPSHOT') ? 'integration' : 'release'

    project.tasks.withType(Jar).each {
        it.version = currentVersion
    }
}

subprojects {
    apply plugin: 'java'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    task sourceJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }
    jar.dependsOn sourceJar

    artifacts {
        archives sourceJar, jar
    }

    test {
        useTestNG()
        testLogging {
            exceptionFormat "full"
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            minGranularity 0
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.6'
}

idea {
    project {
        jdkName = '1.7'
        languageLevel = '1.7'
        wildcards += '?*.gradle'
        ipr {
            withXml { provider ->
                def node = provider.asNode()
                // Use git
                def vcsConfig = node.component.find { it.'@name' == 'VcsDirectoryMappings' }
                vcsConfig.mapping[0].'@vcs' = 'Git'
            }
        }
    }
}
